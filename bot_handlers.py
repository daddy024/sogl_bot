import os
import logging
from dotenv import load_dotenv
import nest_asyncio
nest_asyncio.apply()

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, CallbackContext
)
from apscheduler.schedulers.background import BackgroundScheduler
from data_updater import download_xlsx_from_yadisk, YANDEX_PUBLIC_URL

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
DISTRICT, SUBJECT = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env!")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
df = None

def update_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    global df
    try:
        df = download_xlsx_from_yadisk(YANDEX_PUBLIC_URL)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
scheduler = BackgroundScheduler()
scheduler.add_job(update_data, 'interval', minutes=5)
scheduler.start()

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
import atexit
atexit.register(scheduler.shutdown)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
update_data()

async def start(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –æ–∫—Ä—É–≥–∞"""
    global df
    if df is None or '–§–û' not in df.columns:
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    
    districts = df['–§–û'].dropna().unique().tolist()
    if not districts:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤.")
        return ConversationHandler.END
    
    district_keyboard = [[str(district)] for district in districts]
    menu_keyboard = [["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]]
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –ü–ì–°.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥:",
        reply_markup=ReplyKeyboardMarkup(district_keyboard + menu_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return DISTRICT

async def menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'"""
    return await start(update, context)

async def handle_district(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞"""
    global df
    selected_district = update.message.text
    if selected_district == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        return await menu(update, context)
    
    context.user_data['selected_district'] = selected_district
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥: {selected_district}")

    if df is None or '–§–û' not in df.columns or '–°—É–±—ä–µ–∫—Ç' not in df.columns:
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    subjects = df[df['–§–û'] == selected_district]['–°—É–±—ä–µ–∫—Ç'].dropna().unique().tolist()
    if not subjects:
        await update.message.reply_text("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞ –Ω–µ—Ç —Å—É–±—ä–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–∫—Ä—É–≥.")
        return DISTRICT

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É–±—ä–µ–∫—Ç–∞–º–∏
    keyboard = [[str(subject)] for subject in subjects]
    
    logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É–±—ä–µ–∫—Ç–æ–≤: {keyboard}")
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—ä–µ–∫—Ç –†–§:",
        reply_markup=ReplyKeyboardMarkup(keyboard + [["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return SUBJECT

async def handle_subject(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É–±—ä–µ–∫—Ç–∞"""
    global df
    selected_subject = update.message.text
    
    if selected_subject == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        return await menu(update, context)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—É–±—ä–µ–∫—Ç: {selected_subject}")

    if df is None or '–°—É–±—ä–µ–∫—Ç' not in df.columns or '–°—Ç–∞—Ç—É—Å' not in df.columns:
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    matching_rows = df[df['–°—É–±—ä–µ–∫—Ç'] == selected_subject]
    if matching_rows.empty:
        await update.message.reply_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—É–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return SUBJECT

    status = matching_rows['–°—Ç–∞—Ç—É—Å'].values[0]
    await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å —Å—É–±—ä–µ–∫—Ç–∞ {selected_subject}: {status}")
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
